"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeRom = exports.FakeMemory = void 0;
class FakeMemory {
    rdramReadBigInt64(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadBigIntS64(addr) {
        throw new Error("Method not implemented.");
    }
    rdramWriteBigInt64(addr, val) {
        throw new Error("Method not implemented.");
    }
    rdramRead64(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadS64(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadF64(addr) {
        throw new Error("Method not implemented.");
    }
    rdramWrite64(addr, val) {
        throw new Error("Method not implemented.");
    }
    rdramWriteF64(addr, val) {
        throw new Error("Method not implemented.");
    }
    rdramRead8(addr) {
        throw new Error("Method not implemented.");
    }
    rdramWrite8(addr, value) {
        throw new Error("Method not implemented.");
    }
    rdramRead16(addr) {
        throw new Error("Method not implemented.");
    }
    rdramWrite16(addr, value) {
        throw new Error("Method not implemented.");
    }
    rdramWrite32(addr, value) {
        throw new Error("Method not implemented.");
    }
    rdramRead32(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadBuffer(addr, size) {
        throw new Error("Method not implemented.");
    }
    rdramWriteBuffer(addr, buf) {
        throw new Error("Method not implemented.");
    }
    dereferencePointer(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadS8(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadS16(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadS32(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadBitsBuffer(addr, bytes) {
        throw new Error("Method not implemented.");
    }
    rdramReadBits8(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadBit8(addr, bitoffset) {
        throw new Error("Method not implemented.");
    }
    rdramWriteBitsBuffer(addr, buf) {
        throw new Error("Method not implemented.");
    }
    rdramWriteBits8(addr, buf) {
        throw new Error("Method not implemented.");
    }
    rdramWriteBit8(addr, bitoffset, bit) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtr8(addr, offset) {
        throw new Error("Method not implemented.");
    }
    rdramWritePtr8(addr, offset, value) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtr16(addr, offset) {
        throw new Error("Method not implemented.");
    }
    rdramWritePtr16(addr, offset, value) {
        throw new Error("Method not implemented.");
    }
    rdramWritePtr32(addr, offset, value) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtr32(addr, offset) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtrBuffer(addr, offset, size) {
        throw new Error("Method not implemented.");
    }
    rdramWritePtrBuffer(addr, offset, buf) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtrS8(addr, offset) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtrS16(addr, offset) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtrS32(addr, offset) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtrBitsBuffer(addr, offset, bytes) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtrBits8(addr, offset) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtrBit8(addr, offset, bitoffset) {
        throw new Error("Method not implemented.");
    }
    rdramWritePtrBitsBuffer(addr, offset, buf) {
        throw new Error("Method not implemented.");
    }
    rdramWritePtrBits8(addr, offset, buf) {
        throw new Error("Method not implemented.");
    }
    rdramWritePtrBit8(addr, offset, bitoffset, bit) {
        throw new Error("Method not implemented.");
    }
    rdramReadF32(addr) {
        throw new Error("Method not implemented.");
    }
    rdramReadPtrF32(addr, offset) {
        throw new Error("Method not implemented.");
    }
    rdramWriteF32(addr, value) {
        throw new Error("Method not implemented.");
    }
    rdramWritePtrF32(addr, offset, value) {
        throw new Error("Method not implemented.");
    }
    bitCount8(value) {
        throw new Error("Method not implemented.");
    }
    bitCount16(value) {
        throw new Error("Method not implemented.");
    }
    bitCount32(value) {
        throw new Error("Method not implemented.");
    }
    bitCountBuffer(buf, off, len) {
        throw new Error("Method not implemented.");
    }
    getRdramBuffer() {
        throw new Error("Method not implemented.");
    }
    invalidateCachedCode() {
        throw new Error("Method not implemented.");
    }
}
exports.FakeMemory = FakeMemory;
class FakeRom {
    romRead8(addr) {
        return 0;
    }
    romWrite8(addr, value) {
    }
    romRead16(addr) {
        return 0;
    }
    romWrite16(addr, value) {
    }
    romRead32(addr) {
        return 0;
    }
    romWrite32(addr, value) {
    }
    romReadBuffer(addr, size) {
        return Buffer.alloc(size);
    }
    romWriteBuffer(addr, buf) {
    }
    getRomBuffer() {
        throw new Error("Method not implemented.");
    }
}
exports.FakeRom = FakeRom;
//# sourceMappingURL=FakeMemory.js.map